#include <iostream>
#include <string>
#include <assert.h>


using namespace std;
//stringSize=sizeof(h)/sizeof(h[0]);
string h[7]={"peter", "lois", "meg", "chris", "", "meg", "stewie"}; // make sure what n means
string k[8]={"peter", "lois", "meg", "chris", "random", "", "meg", "stewie"}; // another string for disagree function

string d[9] = {"lois", "chris", "peter", "peter", "meg", "meg", "meg", "peter", "peter"}; // the other string
int findLast(const string a[], int n, string target);// the first function
int tally(const string a[], int n, string target);//the second function
bool findFirstSequence(const string a[], int n, string target, int& begin, int& end);//the third function
int moveToEnd(string a[], int n, int pos);   // the fourth function
int moveToBegining(string a[], int n, int pos);
int disagree(const string a1[], int n1, const string a2[], int n2);
int removeDups(string a[], int n);
bool subsequence(const string a1[], int n1, const string a2[], int n2);
int mingle(const string a1[], int n1, const string a2[], int n2, string result[], int max);
int divide(string a[], int n, string divider);



int main ()
{
    
    
    assert(findLast(h, 7, "meg")==5);
    assert(tally(h, 7, "meg")==2);
  
    string d[10] = {
        "lois", "chris", "peter", "peter", "meg", "meg", "meg", "peter", "peter", "peter"
    };
    removeDups(d, 20);
    
    for (int i=0; i<12; i++)
    {
        cout << d[i] << endl;
    }
    
    
}

//use size of?
//if it is an empty string, it's supposed to succeed whatever?


int findLast(const string a[], int n, string target)
{
    int counter=0;;
    if (n<0)
        return -1;
   
    for (int i=0; i<n; i++)
    {
        if (a[i]==target)
            counter=i;
    }
    return counter;
    
}

int tally(const string a[], int n, string target)
{
    int counter=0;
    for (int i=0; i<n; i++)
    {
        if (a[i]==target)
            counter++;
        
        
        
    }
    return counter;
    
}

bool findFirstSequence(const string a[], int n, string target, int& begin, int& end)
{
    int counter=0;
    
    
    if (n<0)
        return false;
    
    
    for (int i=0; i<n; i++)
    {
        if (a[i]==target)
        {
           begin=i;
            for (int k=i;k<n;k++)
            {
                if (a[k]==target)
                    counter++;
                end=begin+counter-1;
                if (a[k]!=target)
                    return true;
                
            }
            
        }
        
        
    }
   
    
    if (begin==0)
        return false;
    
    return true;

    
}

int moveToEnd(string a[], int n, int pos)  // tested correct but kinda weird
{
    string stored;
    if (n<0)
        return -1;
    
    stored=a[pos];
    int length;
    length=sizeof(a)/sizeof(a[0]);
    
    string movedString=a[pos];
    
    for (int i=pos; i<=n;i++)
    {
        a[i]=a[i+1];
    }
    
    if (n>length)
    {
        a[length-1]=stored;
    }
    if (n<length)
    {
        a[n]=stored;
        
    }
    
    return 1;
}


int moveToBegining(string a[], int n, int pos) // like the function above, feels kinda weird but test successfully.
{
    string stored;
    if (n<0)
        return -1;
    
    stored=a[pos];
    int length;
    length=sizeof(a)/sizeof(a[0]);
    for (int i=0; i<=pos; i++)
    {
        a[pos-i]=a[pos-1-i];
    }
    a[0]=stored;
    
    
    return 2;
}


int disagree(const string a1[], int n1, const string a2[], int n2) // I changed the meaning of n in this one
{
    int counter=0;
    if (n1<0)
        return -1;
    if (n2<0)
        return -1;
    
    if (n1<=n2)
    {
        for (int i=0; i<n1 ; i++)
        {
            if (a1[i]==a2[i])
            {
                counter++;
            }
            else
                break;
        }
        
    }
    else
    {
        for (int i=0; i<n2 ; i++)
        {
            if (a1[i]==a2[i])
            {
                counter++;
            }
            else
                break;
        }
        
        
        
    }
    return counter;
}

int removeDups(string a[], int n) // undeveloped
{
    if (n<0)
        return -1;
    int length=sizeof(d)/sizeof(d[0]); // the length of the thing doesn't work so well.
    
    int counter=0;
    
    for (int i=0; i<length; i++)
    {
        if (a[i]==a[i+1])
        {
            
            counter++;
            
        }
        
    }
    
    
    
    if (length<=n)
    {
        for (int k=0; k<counter; k++)
        {
            for (int i=1; i<length+1; i++)
            {
                if (a[i-1]==a[i])
                {
            
                    a[i]=a[i+1];
                    
                }
        
            }
    
        }
        
    }
    else
    {
        for (int k=0; k<counter; k++)
        {
            for (int i=1; i<n+1; i++)
            {
                if (a[i-1]==a[i])
                {
                    
                    a[i]=a[i+1];
                    
                }
                
            }
            
        }
        
        
    }
    
    return 0;
    
}










